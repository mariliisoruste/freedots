FREEDOTS -*- mode: org; fill-column: 78 -*-

* Transcription
** TODO Tuplets

MusicXML has two ways of specifying tuples.
One is via the time-modification element, whcih affects the
duration of the note during playback.
The other is the <suplet> element inside of <notations> which
is solely ment for graphical representation.
This means programs might export MusicXML without the <tuplet>
element (when there is no special graphical markup) but
it always needs to use time-modification so that the timing in the end is
correct.  Therefore, FreeDots should probably consider
time-modification and not the <tuplet> element, since un-marked-up
tuplets would lead to unclear braille.

So what we need is some way to group time-modified notes together
such that the transcriber can ask if a certain note/chord
is the first element of a tuplet group.  If so, it would
emit the appropriate braille symbol for the particular tuplet.

** TODO in-accord and partial measures

If notes in a measure run in parallel it is the choice of the
transcriber what to do, options are:
 * use intervals: This is concise but might make it less obvious how
   several voices run individually.  In a 3 voice measure (treble clef) you'd
   always need to read the top note and both intervals to know what the
   bottom note is.
 * use in-accord separators (full-measure and part-measure): This can make
   several voices pretty clear, but usually results in more cells being used.

Considerations: It really depends on the music if intervals
or in-accord separators should be used.  It might be a good idea
to have a interval-cancel feature which would allow the user
to select a chord and request it not being written with interval notation.

Additionally, the use of part-measure in-accord can further
complicate things.  There is almost always the choice of using
only full-measure in-accord, however, what is more readable
is really hard to tell programmatically (at least I think so for now).
Also, there seem to be cases where part-measure in-accord is
necessary to convey what happens (full-measure in accord wouldn't work, see below).

This said, MusicXML has also several ways to convey identical
structure.  Either <chord/> is used to combine notes (this
is really just syntactic sugar for manipulating the tick) or <backup> is used
to write the notes in several sweeps from left to right.  However, visually,
there is no difference, so ideally, FreeDots would not care how the original
MusicXML is specified.  Chords should be detected as such also if <chord/>
is not used but notes appears to be parallel.  It should
be a setting at transcription time that tells the system if
intervals are allowed and if full-measure in-accord only, or in-accord in
general is supposed to be used.

We need to find an intermediate representation that allows for
easy querying of structure such that parallel notes and partial
voices can be handled.  In 4/4 time, imagine a measure
that starts with a quarter c, but continues with a dotted half
b and d.  This is part-measure in accord, and would be written
as qc>hb,hd (> terminates a partial measure and , separates partial-measure
in-accord).

To top if off, it would be desireable to design the transcription
phase such that all possible transcriptions of a measure (given
the restrictions specified by the user) are generated and the
best (shortest) version is used.  However, this could lead
to strange transcriptions if the method can vary from measure to measure,
so set up in the hierarchy and make the decision based
on scoring all measures.  But this will not work with
music that changes a lot, which is probably the default, so...

*** Examples
BWV988 Aria m1 left hand:

⠸⠜⠸⠗⠄⠇⠣⠜⠧⠨⠅⠸⠞⠐⠂⠧⠐⠱ or
⠸⠜⠸⠗⠄⠇⠣⠜⠧⠸⠞⠣⠜⠧⠧⠐⠱ or

BWV 1004 Chaconne m1:

⠧⠨⠅⠐⠪⠄⠊⠐⠂⠨⠟⠬ or
⠧⠨⠅⠐⠪⠄⠊⠐⠂⠨⠟⠐⠂⠨⠕

** TODO Doubling

Doubling is a very fundamental technique in braille music notation.
Basically, if *something* other than a note repeats itself more than three
times, it can be written twice in the first occurance, ommited for the rest
upto the last occurance, where it is reinstatate a single time to indicate
the end of the passage.

While this sounds simple and is easy to read, designing a data structure
to detect it seems not so easy since this rule is very generic.  A few
examples might help:

*** TODO Doubling slurs

The simplest case is a slur spanning a across four notes and more.
Without doubling, a C scale slurred is

  ⠙⠉⠑⠉⠋⠉⠛⠉⠓⠉⠊⠉⠚⠉⠙

with doubling it becomes:

  ⠙⠉⠉⠑⠋⠛⠓⠊⠚⠉⠙

(note that doubling is not limited to measure boundaries, it applies
to the whole paragraph at least, if not page or piece)

*** TODO Doubling intervals

However, doubling can also occur with intervals.  The left hand of the
first four measures of LV Beethovens Moonshine sonata reads:

⠼⠙⠩⠼⠃⠆ ⠸⠜⠽⠤ ⠾⠤ ⠎⠤⠟⠤ ⠗⠤⠗⠤

which could be written as

⠼⠙⠩⠼⠃⠆ ⠸⠜⠽⠤⠤ ⠾ ⠎⠟ ⠗⠗⠤

As a rule, if more then three chords are played in a sequence and
one (or more) of its intervals reoccurs within the whole sequence,
it should be doulbed in the first chord and reprinted in the
last chord.

*** TODO Doubling Tuplets

Similarily but this time as a prefix, tripplet (and alike)
signs (⠆) can be doubled if a series of tripllets follow.

Example:

⠆⠸⠓⠐⠙⠋⠆⠸⠓⠐⠙⠋⠆⠸⠓⠐⠙⠋⠆⠸⠓⠐⠙⠋

vs

⠆⠆⠸⠓⠐⠙⠋⠸⠓⠐⠙⠋⠸⠓⠐⠙⠋⠆⠸⠓⠐⠙⠋

(note: tradeoffs should eventually be considered as well.
The example is contrived since the passage actually continues
on for a few measures like that, so doubling is definitely desireable,
however, if we look at the example as it is, the second version is just
one cell shorter while the first version is easier to read.
Seen from that perspective, doubling should probably be scored on the basis
of how many cells it saves.  A user configurable value with a default
of 3 seems sensible at first thought.)

** TODO Note groupings

** TODO repetitions

The simile sign (⠶) is useful for indicating repetitions that
are usually not marked up specially in visual notation.

*** DONE Repetition of whole measures

This is implemented but needs extra work to prevent it overshooting:

*** TODO Do not use repeat sign if no space is saved

Currently, if a measure only consists of a signel cell note and that
measure is repeated, the simile sign is used.  This unneedlessly makes
it harder to read the melody.  The simile sign should probably
have a configurable treshold, maybe defaulting to at least needing
to save 2 (or 1?) cells.

*** TODO Repetition of voices

Sometimes (see bwv999) a certain voice repeats itself from
measure to measure.  The simile sign can be used here as well.

This used to work in the FreeDots python prototype, but
given the complexity (and crazyness) of the current transcription
classes it doesn't work anymore in the Java version.
This should be relatively trivial to do though.

*** TODO Repetition of beats

If a beat inside a voice is repeated the simile sign can be used as well.
This occurs frequently, notably in the moonshine sonata in combination
with tripplets.

The example given above becomes

⠆⠆⠸⠓⠐⠙⠋⠸⠓⠐⠙⠋⠶ ⠶

Note that first, simile is used to indicate beat repetition, and then,
simile is used to indicate the repetition of the previous measure, resulting
in 8 identical tripplets being played over the time of two measures
in 2/2 time.

Also note why simile isn't used like this:
WRONG ⠼⠃⠆ ⠆⠆⠸⠓⠐⠙⠋⠶⠶⠶

While it would be tempting to indicate the tripplets being identical,
the piece is in 2/2 time, so a *beat* is one half, not one quarter.

This said, the repetition detection algorithm needs to divide
a measure up into its beats, if that works see if there
are identical beats.  As above, this technique needs to
be limited according to its savings,
so in 4/4 time ⠹⠹⠹⠹ shouldn't become ⠹⠶⠶⠶ which just obscurs things but
doesn't save any cells.


* Playback

** TODO Play all supported articulations and ornaments

As an example, the turn ornament is executed already.
Many more things need doing, like proper dynamics, articulation
(staccato etc) and mordent etc.


* User interface

** TODO Editing fingering

freedots.musicxml almost supports setting fingering already.

*** STARTED keyboard fingering

This is the simplest case.  Most of the time only a single
finger needs to be specified, sometimes fingers need to change
on one note ("stummer Fingerwechsel" in german).

*** TODO Fingering string instruments

For string instruments, the UI would need to ask for left and right hand
fingering.  Left hand fingering has the unfretted string as a special
exception.  There is probably some work to do
in the freedots.musicxml package to support this properly.
Currently the implementation just stupidly assumes
fingering is just a list of finger numbers, i.e. it only
supports keyboard fingering.



* MS Windows Installer
** TODO Check error during installation

Some users have reported some kind of error (no details) during
installation.

** TODO Provide an option to install Java Access Bridge

Currently, on the JRE is installed if none exists.  Ideally, the user
should be prompted if they want to install java access bridge
as well, since most screen readers on Windows require that.
