# MusicXML™ common.mod module
# 
# Version 2.0 - 18 June 2007
# 
# Copyright © 2004-2007 Recordare LLC.
# http://www.recordare.com/
# 
# This MusicXML™ work is being provided by the copyright
# holder under the MusicXML Document Type Definition 
# Public License Version 2.0, available from:
# 
#	http://www.recordare.com/dtds/license.html

# This file contains entities and elements that are common
# across multiple DTD modules. In particular, several elements
# here are common across both notes and measures.

# Entities

# If greater ASCII compatibility is desired, entity references
# may be used instead of the direct Unicode characters.
# Currently we include ISO Latin-1 for Western European
# characters and ISO Latin-2 for Central European characters.
# These files are local copies of the W3C entities located at:
# 
#	http://www.w3.org/2003/entities/

# Data type entities. The ones that resolve to strings show
# intent for how data is formatted and used.

# Calendar dates are represented yyyy-mm-dd format, following
# ISO 8601.

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

yyyy-mm-dd = text
# The tenths entity is a number representing tenths of
# interline space (positive or negative) for use in
# attributes. The layout-tenths entity is the same for
# use in elements. Both integer and decimal values are 
# allowed, such as 5 for a half space and 2.5 for a 
# quarter space. Interline space is measured from the
# middle of a staff line.
tenths = string
layout-tenths = text
# The start-stop and start-stop-continue entities are used 
# for musical elements that can either start or stop, such 
# as slurs, tuplets, and wedges. The start-stop-continue
# entity is used when there is a need to refer to an
# intermediate point in the symbol, as for complex slurs.
# The start-stop-single entity is used when the same
# element is used for multi-note and single-note notations,
# as for tremolos.
start-stop = "start" | "stop"
start-stop-continue = "start" | "stop" | "continue"
start-stop-single = "start" | "stop" | "single"
# The yes-no entity is used for boolean-like attributes.
yes-no = "yes" | "no"
# The yes-no-number entity is used for attributes that can
# be either boolean or numeric values. Values can be "yes",
# "no", or numbers.
yes-no-number = xsd:NMTOKEN
# The symbol-size entity is used to indicate full vs.
# cue-sized vs. oversized symbols. The large value
# for oversized symbols was added in version 1.1.
symbol-size = "full" | "cue" | "large"
# The up-down entity is used for arrow direction,
# indicating which way the tip is pointing.
up-down = "up" | "down"
# The top-bottom entity is used to indicate the top or
# bottom part of a vertical shape like non-arpeggiate.
top-bottom = "top" | "bottom"
# The left-right entity is used to indicate whether one
# element appears to the left or the right of another
# element.
left-right = "left" | "right"
# The number-of-lines entity is used to specify the
# number of lines in text decoration attributes.
number-of-lines = "0" | "1" | "2" | "3"
# Slurs, tuplets, and many other features can be
# concurrent and overlapping within a single musical
# part. The number-level attribute distinguishes up to
# six concurrent objects of the same type. A reading
# program should be prepared to handle cases where
# the number-levels stop in an arbitrary order.
# Different numbers are needed when the features
# overlap in MusicXML file order. When a number-level
# value is implied, the value is 1 by default.
number-level = "1" | "2" | "3" | "4" | "5" | "6"
# The MusicXML format supports six levels of beaming, up
# to 256th notes. Unlike the number-level attribute, the
# beam-level attribute identifies concurrent beams in a beam
# group. It does not distinguish overlapping beams such as
# grace notes within regular notes, or beams used in different
# voices.
beam-level = "1" | "2" | "3" | "4" | "5" | "6"
# Common structures for formatting attribute definitions. 

# The position attributes are based on MuseData print
# suggestions. For most elements, any program will compute
# a default x and y position. The position attributes let
# this be changed two ways. 
# 
# The default-x and default-y attributes change the
# computation of the default position. For most elements,
# the origin is changed relative to the left-hand side of
# the note or the musical position within the bar (x) and
# the top line of the staff (y).
# 
# For the following elements, the default-x value changes
# the origin relative to the start of the current measure:
# 
#	- note
#	- figured-bass
#	- harmony
#	- link
#	- directive
#	- measure-numbering
#	- all descendants of the part-list element
#	- all children of the direction-type element
# 
# When the part-name and part-abbreviation elements are
# used in the print element, the default-x value changes the
# origin relative to the start of the first measure on the
# system. These values are used when the current measure or
# a succeeding measure starts a new system.
# 
# For the note, figured-bass, and harmony elements, the
# default-x value is considered to have adjusted the musical
# position within the bar for its descendant elements.
# 
# Since the credit-words and credit-image elements are not
# related to a measure, in these cases the default-x and
# default-y attributes adjust the origin relative to the
# bottom left-hand corner of the specified page.
# 
# The relative-x and relative-y attributes change the position 
# relative to the default position, either as computed by the
# individual program, or as overridden by the default-x and
# default-y attributes.
# 
# Positive x is right, negative x is left; positive y is up,
# negative y is down. All units are in tenths of interline
# space. For stems, positive relative-y lengthens a stem
# while negative relative-y shortens it.
# 
# The default-x and default-y position attributes provide
# higher-resolution positioning data than related features
# such as the placement attribute and the offset element.
# Applications reading a MusicXML file that can understand
# both features should generally rely on the default-x and
# default-y attributes for their greater accuracy. For the
# relative-x and relative-y attributes, the offset element,
# placement attribute, and directive attribute provide
# context for the relative position information, so the two
# features should be interpreted together.
# 
# As elsewhere in the MusicXML format, tenths are the global
# tenths defined by the scaling element, not the local tenths
# of a staff resized by the staff-size element.
position =
  attribute default-x { tenths }?,
  attribute default-y { tenths }?,
  attribute relative-x { tenths }?,
  attribute relative-y { tenths }?
# The placement attribute indicates whether something is
# above or below another element, such as a note or a
# notation. 
placement = attribute placement { "above" | "below" }?
# The orientation attribute indicates whether slurs and
# ties are overhand (tips down) or underhand (tips up).
# This is distinct from the placement entity used by any
# notation type.
orientation = attribute orientation { "over" | "under" }?
# The directive entity changes the default-x position 
# of a direction. It indicates that the left-hand side of the
# direction is aligned with the left-hand side of the time
# signature. If no time signature is present, it is aligned
# with the left-hand side of the first music notational
# element in the measure. If a default-x, justify, or halign
# attribute is present, it overrides the directive entity.
directive = attribute directive { yes-no }?
# The bezier entity is used to indicate the curvature of
# slurs and ties, representing the control points for a 
# cubic bezier curve. For ties, the bezier entity is 
# used with the tied element.
# 
# Normal slurs, S-shaped slurs, and ties need only two 
# bezier points: one associated with the start of the slur 
# or tie, the other with the stop. Complex slurs and slurs 
# divided over system breaks can specify additional 
# bezier data at slur elements with a continue type.
# 
# The bezier-offset, bezier-x, and bezier-y attributes
# describe the outgoing bezier point for slurs and ties 
# with a start type, and the incoming bezier point for
# slurs and ties with types of stop or continue. The 
# attributes bezier-offset2, bezier-x2, and bezier-y2 
# are only valid with slurs of type continue, and 
# describe the outgoing bezier point.
# 
# The bezier-offset and bezier-offset2 attributes are
# measured in terms of musical divisions, like the offset
# element. These are the recommended attributes for
# specifying horizontal position. The other attributes
# are specified in tenths, relative to any position 
# settings associated with the slur or tied element.
bezier =
  attribute bezier-offset { text }?,
  attribute bezier-offset2 { text }?,
  attribute bezier-x { tenths }?,
  attribute bezier-y { tenths }?,
  attribute bezier-x2 { tenths }?,
  attribute bezier-y2 { tenths }?
# The font entity gathers together attributes for
# determining the font within a directive or direction.
# They are based on the text styles for Cascading
# Style Sheets. The font-family is a comma-separated list
# of font names. These can be specific font styles such
# as Maestro or Opus, or one of several generic font styles:
# music, serif, sans-serif, handwritten, cursive, fantasy,
# and monospace. The music and handwritten values refer
# to music fonts; the rest refer to text fonts. The fantasy
# style refers to decorative text such as found in older
# German-style printing. The font-style can be normal or 
# italic. The font-size can be one of the CSS sizes 
# (xx-small, x-small, small, medium, large, x-large,
# xx-large) or a numeric point size. The font-weight can 
# be normal or bold. The default is application-dependent,
# but is a text font vs. a music font.
font =
  attribute font-family { text }?,
  attribute font-style { text }?,
  attribute font-size { text }?,
  attribute font-weight { text }?
# The color entity indicates the color of an element.
# Color may be represented as hexadecimal RGB triples,
# as in HTML, or as hexadecimal ARGB tuples, with the
# A indicating alpha of transparency. An alpha value
# of 00 is totally transparent; FF is totally opaque.
# If RGB is used, the A value is assumed to be FF. 
# 
# For instance, the RGB value "#800080" represents
# purple. An ARGB value of "#40800080" would be a
# transparent purple.
# 
# As in SVG 1.1, colors are defined in terms of the
# sRGB color space (IEC 61966).
color = attribute color { text }?
# The text-decoration entity is based on the similar
# feature in XHTML and CSS. It allows for text to
# be underlined, overlined, or struck-through. It
# extends the CSS version by allow double or
# triple lines instead of just being on or off.
text-decoration =
  attribute underline { number-of-lines }?,
  attribute overline { number-of-lines }?,
  attribute line-through { number-of-lines }?
# The justify entity is used to indicate left, center,
# or right justification. The default value varies for
# different elements.
justify = attribute justify { "left" | "center" | "right" }?
# In cases where text extends over more than one line, 
# horizontal alignment and justify values can be different.
# The most typical case is for credits, such as:
# 
#	Words and music by
#	  Pat Songwriter
# 
# Typically this type of credit is aligned to the right,
# so that the position information refers to the right-
# most part of the text. But in this example, the text 
# is center-justified, not right-justified.
# 
# The halign attribute is used in these situations. If it 
# is not present, its value is the same as for the justify
# attribute.
halign = attribute halign { "left" | "center" | "right" }?
# The valign entity is used to indicate vertical
# alignment to the top, middle, bottom, or baseline 
# of the text. Defaults are implementation-dependent.
valign = attribute valign { "top" | "middle" | "bottom" | "baseline" }?
# The valign-image entity is used to indicate vertical
# alignment for images and graphics, so it removes the
# baseline value. Defaults are implementation-dependent.
valign-image = attribute valign { "top" | "middle" | "bottom" }?
# The letter-spacing entity specifies text tracking.
# Values are either "normal" or a number representing
# the number of ems to add between each letter. The
# number may be negative in order to subtract space.
# The default is normal, which allows flexibility of
# letter-spacing for purposes of text justification.
letter-spacing = attribute letter-spacing { text }?
# The line-height entity specified text leading. Values
# are either "normal" or a number representing the
# percentage of the current font height  to use for 
# leading. The default is "normal". The exact normal 
# value is implementation-dependent, but values 
# between 100 and 120 are recommended.
line-height = attribute line-height { text }?
# The text-direction entity is used to adjust and override
# the Unicode bidirectional text algorithm, similar to the
# W3C Internationalization Tag Set recommendation. Values
# are ltr (left-to-right embed), rtl (right-to-left embed),
# lro (left-to-right bidi-override), and rlo (right-to-left
# bidi-override). The default value is ltr. This entity
# is typically used by applications that store text in
# left-to-right visual order rather than logical order.
# Such applications can use the lro value to better
# communicate with other applications that more fully
# support bidirectional text.
text-direction = attribute dir { "ltr" | "rtl" | "lro" | "rlo" }?
# The text-rotation entity is used to rotate text
# around the alignment point specified by the
# halign and valign entities. The value is a number
# ranging from -180 to 180. Positive values are
# clockwise rotations, while negative values are
# counter-clockwise rotations.
text-rotation = attribute rotation { text }?
# The print-style entity groups together the most popular
# combination of printing attributes: position, font, and
# color.
print-style = position, font, color
# The line-shape entity is used to distinguish between
# straight and curved lines. The line-type entity
# distinguishes between solid, dashed, dotted, and
# wavy lines.
line-shape = attribute line-shape { "straight" | "curved" }?
line-type =
  attribute line-type { "solid" | "dashed" | "dotted" | "wavy" }?
# The printout entity is based on MuseData print
# suggestions. They allow a way to specify not to print
# print an object (e.g. note or rest), its augmentation
# dots, or its lyrics. This is especially useful for notes 
# that overlap in different voices, or for chord sheets
# that contain lyrics and chords but no melody. For wholly
# invisible notes, such as those providing sound-only data,
# the attribute for print-spacing may be set to no so that
# no space is left for this note. The print-spacing value
# is only used if no note, dot, or lyric is being printed.
# 
# By default, all these attributes are set to yes. If 
# print-object is set to no, print-dot and print-lyric are
# interpreted to also be set to no if they are not present.
print-object = attribute print-object { yes-no }?
print-spacing = attribute print-spacing { yes-no }?
printout =
  print-object,
  attribute print-dot { yes-no }?,
  print-spacing,
  attribute print-lyric { yes-no }?
# The text-formatting entity contains the common formatting 
# attributes for text elements. Default values may differ
# across the elements that use this entity.
text-formatting =
  justify,
  halign,
  valign,
  print-style,
  text-decoration,
  text-rotation,
  letter-spacing,
  line-height,
  attribute xml:lang { xsd:NMTOKEN }?,
  text-direction,
  attribute enclosure { "rectangle" | "oval" | "none" }?
# The level-display entity allows specification of three 
# common ways to indicate editorial indications: putting
# parentheses or square brackets around a symbol, or making
# the symbol a different size. If not specified, they are
# left to application defaults. It is used by the level and
# accidental elements.
level-display =
  attribute parentheses { yes-no }?,
  attribute bracket { yes-no }?,
  attribute size { symbol-size }?
# Common structures for playback attribute definitions. 

# The trill-sound entity includes attributes used to guide
# the sound of trills, mordents, turns, shakes, and wavy
# lines, based on MuseData sound suggestions. The default
# choices are:
# 
#	start-note = "upper"
#	trill-step = "whole"
#	two-note-turn = "none"
#	accelerate = "no"
#	beats = "4" (minimum of "2").
# 
# Second-beat and last-beat are percentages for landing on
# the indicated beat, with defaults of 25 and 75 respectively.
# 
# For mordent and inverted-mordent elements, the defaults
# are different:
# 
#	The default start-note is "main", not "upper".
#	The default for beats is "3", not "4".
#	The default for second-beat is "12", not "25".
#	The default for last-beat is "24", not "75".
trill-sound =
  attribute start-note { "upper" | "main" | "below" }?,
  attribute trill-step { "whole" | "half" | "unison" }?,
  attribute two-note-turn { "whole" | "half" | "none" }?,
  attribute accelerate { yes-no }?,
  attribute beats { text }?,
  attribute second-beat { text }?,
  attribute last-beat { text }?
# The bend-sound entity is used for bend and slide elements,
# and is similar to the trill-sound. Here the beats element
# refers to the number of discrete elements (like MIDI pitch
# bends) used to represent a continuous bend or slide. The
# first-beat indicates the percentage of the direction for
# starting a bend; the last-beat the percentage for ending it.
# The default choices are:
# 
#	accelerate = "no"
#	beats = "4" (minimum of "2")
#	first-beat = "25"
#	last-beat = "75"
bend-sound =
  attribute accelerate { yes-no }?,
  attribute beats { text }?,
  attribute first-beat { text }?,
  attribute last-beat { text }?
# Common structures for other attribute definitions. 

# The document-attributes entity is used to specify the
# attributes for an entire MusicXML document. Currently
# this is used for the version attribute.
# 
# The version attribute was added in Version 1.1 for the
# score-partwise and score-timewise documents, and in
# Version 2.0 for opus documents. It provides an easier 
# way to get version information than through the MusicXML
# public ID. The default value is 1.0 to make it possible
# for programs that handle later versions to distinguish
# earlier version files reliably. Programs that write
# MusicXML 1.1 or 2.0 files should set this attribute.
document-attributes =
  [ a:defaultValue = "1.0" ] attribute version { text }?
# Common structures for element definitions. 

# Two entities for editorial information in notes. These
# entities, and their elements defined below, are used
# across all the different component DTD modules.
editorial = element-footnote?, element-level?
editorial-voice = element-footnote?, element-level?, element-voice?
# Elements

# Footnote and level are used to specify editorial
# information, while voice is used to distinguish between
# multiple voices (what MuseData calls tracks) in individual
# parts. These elements are used throughout the different
# MusicXML DTD modules. If the reference attribute for the
# level element is yes, this indicates editorial information
# that is for display only and should not affect playback.
# For instance, a modern edition of older music may set
# reference="yes" on the attributes containing the music's
# original clef, key, and time signature. It is no by default.
element-footnote = element footnote { attlist-footnote, text }
attlist-footnote &= text-formatting
element-level = element level { attlist-level, text }
attlist-level &=
  attribute reference { yes-no }?,
  level-display
element-voice = element voice { attlist-voice, text }
attlist-voice &= empty
# Fermata and wavy-line elements can be applied both to
# notes and to measures, so they are defined here. Wavy
# lines are one way to indicate trills; when used with a
# measure element, they should always have type="continue"
# set. The fermata text content represents the shape of the
# fermata sign and may be normal, angled, or square.
# An empty fermata element represents a normal fermata.
# The fermata type is upright if not specified.
element-fermata = element fermata { attlist-fermata, text }
attlist-fermata &=
  attribute type { "upright" | "inverted" }?,
  print-style
element-wavy-line = element wavy-line { attlist-wavy-line, empty }
attlist-wavy-line &=
  attribute type { start-stop-continue },
  attribute number { number-level }?,
  position,
  placement,
  color,
  trill-sound
# Staff assignment is only needed for music notated on
# multiple staves. Used by both notes and directions. Staff
# values are numbers, with 1 referring to the top-most staff
# in a part.
element-staff = element staff { attlist-staff, text }
attlist-staff &= empty
# Segno and coda signs can be associated with a measure
# or a general musical direction. These are visual
# indicators only; a sound element is needed to guide
# playback applications reliably.
element-segno = element segno { attlist-segno, empty }
attlist-segno &= print-style
element-coda = element coda { attlist-coda, empty }
attlist-coda &= print-style
# These elements are used both in the time-modification and
# metronome-tuplet elements. The actual-notes element
# describes how many notes are played in the time usually
# occupied by the number of normal-notes. If the normal-notes
# type is different than the current note type (e.g., a 
# quarter note within an eighth note triplet), then the
# normal-notes type (e.g. eighth) is specified in the
# normal-type and normal-dot elements.
element-actual-notes =
  element actual-notes { attlist-actual-notes, text }
attlist-actual-notes &= empty
element-normal-notes =
  element normal-notes { attlist-normal-notes, text }
attlist-normal-notes &= empty
element-normal-type = element normal-type { attlist-normal-type, text }
attlist-normal-type &= empty
element-normal-dot = element normal-dot { attlist-normal-dot, empty }
attlist-normal-dot &= empty
# Dynamics can be associated either with a note or a general
# musical direction. To avoid inconsistencies between and
# amongst the letter abbreviations for dynamics (what is sf
# vs. sfz, standing alone or with a trailing dynamic that is
# not always piano), we use the actual letters as the names
# of these dynamic elements. The other-dynamics element
# allows other dynamic marks that are not covered here, but
# many of those should perhaps be included in a more general
# musical direction element. Dynamics may also be combined as
# in <sf/><mp/>.
# 
# These letter dynamic symbols are separated from crescendo,
# decrescendo, and wedge indications. Dynamic representation
# is inconsistent in scores. Many things are assumed by the
# composer and left out, such as returns to original dynamics.
# Systematic representations are quite complex: for example,
# Humdrum has at least 3 representation formats related to
# dynamics. The MusicXML format captures what is in the score,
# but does not try to be optimal for analysis or synthesis of
# dynamics.
element-dynamics =
  element dynamics {
    attlist-dynamics,
    (element-p
     | element-pp
     | element-ppp
     | element-pppp
     | element-ppppp
     | element-pppppp
     | element-f
     | element-ff
     | element-fff
     | element-ffff
     | element-fffff
     | element-ffffff
     | element-mp
     | element-mf
     | element-sf
     | element-sfp
     | element-sfpp
     | element-fp
     | element-rf
     | element-rfz
     | element-sfz
     | element-sffz
     | element-fz
     | element-other-dynamics)*
  }
attlist-dynamics &= print-style, placement
element-p = element p { attlist-p, empty }
attlist-p &= empty
element-pp = element pp { attlist-pp, empty }
attlist-pp &= empty
element-ppp = element ppp { attlist-ppp, empty }
attlist-ppp &= empty
element-pppp = element pppp { attlist-pppp, empty }
attlist-pppp &= empty
element-ppppp = element ppppp { attlist-ppppp, empty }
attlist-ppppp &= empty
element-pppppp = element pppppp { attlist-pppppp, empty }
attlist-pppppp &= empty
element-f = element f { attlist-f, empty }
attlist-f &= empty
element-ff = element ff { attlist-ff, empty }
attlist-ff &= empty
element-fff = element fff { attlist-fff, empty }
attlist-fff &= empty
element-ffff = element ffff { attlist-ffff, empty }
attlist-ffff &= empty
element-fffff = element fffff { attlist-fffff, empty }
attlist-fffff &= empty
element-ffffff = element ffffff { attlist-ffffff, empty }
attlist-ffffff &= empty
element-mp = element mp { attlist-mp, empty }
attlist-mp &= empty
element-mf = element mf { attlist-mf, empty }
attlist-mf &= empty
element-sf = element sf { attlist-sf, empty }
attlist-sf &= empty
element-sfp = element sfp { attlist-sfp, empty }
attlist-sfp &= empty
element-sfpp = element sfpp { attlist-sfpp, empty }
attlist-sfpp &= empty
element-fp = element fp { attlist-fp, empty }
attlist-fp &= empty
element-rf = element rf { attlist-rf, empty }
attlist-rf &= empty
element-rfz = element rfz { attlist-rfz, empty }
attlist-rfz &= empty
element-sfz = element sfz { attlist-sfz, empty }
attlist-sfz &= empty
element-sffz = element sffz { attlist-sffz, empty }
attlist-sffz &= empty
element-fz = element fz { attlist-fz, empty }
attlist-fz &= empty
element-other-dynamics =
  element other-dynamics { attlist-other-dynamics, text }
attlist-other-dynamics &= empty
# The fret, string, and fingering elements can be used either
# in a technical element for a note or in a frame element as
# part of a chord symbol.

# Fingering is typically indicated 1,2,3,4,5. Multiple
# fingerings may be given, typically to substitute
# fingerings in the middle of a note. The substitution
# and alternate values are "no" if the attribute is 
# not present. For guitar and other fretted instruments,
# the fingering element represents the fretting finger;
# the pluck element represents the plucking finger.
element-fingering = element fingering { attlist-fingering, text }
attlist-fingering &=
  attribute substitution { yes-no }?,
  attribute alternate { yes-no }?,
  print-style,
  placement
# Fret and string are used with tablature notation and chord
# symbols. Fret numbers start with 0 for an open string and
# 1 for the first fret. String numbers start with 1 for the
# highest string. The string element can also be used in
# regular notation.
element-fret = element fret { attlist-fret, text }
attlist-fret &= font, color
element-string = element string { attlist-string, text }
attlist-string &= print-style, placement
# The tuning-step, tuning-alter, and tuning-octave elements
# are represented like the step, alter, and octave elements,
# with different names to reflect their different function.
# They are used in the staff-tuning and accord elements.
element-tuning-step = element tuning-step { attlist-tuning-step, text }
attlist-tuning-step &= empty
element-tuning-alter =
  element tuning-alter { attlist-tuning-alter, text }
attlist-tuning-alter &= empty
element-tuning-octave =
  element tuning-octave { attlist-tuning-octave, text }
attlist-tuning-octave &= empty
# The display-text element is used for exact formatting of
# multi-font text in element in display elements such as
# part-name-display.  Language is Italian ("it") by default.
# Enclosure is none by default.
element-display-text =
  element display-text { attlist-display-text, text }
attlist-display-text &= text-formatting
# The accidental-text element is used for exact formatting of
# accidentals in display elements such as part-name-display.
# Values are the same as for the accidental element.
# Enclosure is none by default.
element-accidental-text =
  element accidental-text { attlist-accidental-text, text }
attlist-accidental-text &= text-formatting
# The part-name-display and part-abbreviation-display 
# elements are used in both the score.mod and direction.mod
# files. They allow more precise control of how part names
# and abbreviations appear throughout a score. The
# print-object attributes can be used to determine what,
# if anything, is printed at the start of each system.
# Formatting specified in the part-name-display and
# part-abbreviation-display elements override the formatting
# specified in the part-name and part-abbreviation elements,
# respectively.
element-part-name-display =
  element part-name-display {
    attlist-part-name-display,
    (element-display-text | element-accidental-text)*
  }
attlist-part-name-display &= print-object
element-part-abbreviation-display =
  element part-abbreviation-display {
    attlist-part-abbreviation-display,
    (element-display-text | element-accidental-text)*
  }
attlist-part-abbreviation-display &= print-object
# The midi-instrument element can be a part of either
# the score-instrument element at the start of a part,
# or the sound element within a part. The id attribute
# refers to the score-instrument affected by the change.
element-midi-instrument =
  element midi-instrument {
    attlist-midi-instrument,
    element-midi-channel?,
    element-midi-name?,
    element-midi-bank?,
    element-midi-program?,
    element-midi-unpitched?,
    element-volume?,
    element-pan?,
    element-elevation?
  }
attlist-midi-instrument &= attribute id { xsd:IDREF }
# MIDI 1.0 channel numbers range from 1 to 16.
element-midi-channel =
  element midi-channel { attlist-midi-channel, text }
attlist-midi-channel &= empty
# MIDI names correspond to ProgramName meta-events within
# a Standard MIDI File.
element-midi-name = element midi-name { attlist-midi-name, text }
attlist-midi-name &= empty
# MIDI 1.0 bank numbers range from 1 to 16,384.
element-midi-bank = element midi-bank { attlist-midi-bank, text }
attlist-midi-bank &= empty
# MIDI 1.0 program numbers range from 1 to 128.
element-midi-program =
  element midi-program { attlist-midi-program, text }
attlist-midi-program &= empty
# For unpitched instruments, specify a MIDI 1.0 note number
# ranging from 1 to 128. Usually used with MIDI banks for
# percussion.
element-midi-unpitched =
  element midi-unpitched { attlist-midi-unpitched, text }
attlist-midi-unpitched &= empty
# The volume value is a percentage of the maximum
# ranging from 0 to 100, with decimal values allowed.
# This corresponds to a scaling value for the MIDI 1.0
# channel volume controller.
element-volume = element volume { attlist-volume, text }
attlist-volume &= empty
# Pan and elevation allow placing of sound in a 3-D space
# relative to the listener. Both are expressed in degrees
# ranging from -180 to 180. For pan, 0 is straight ahead,
# -90 is hard left, 90 is hard right, and -180 and 180
# are directly behind the listener. For elevation, 0 is
# level with the listener, 90 is directly above, and -90
# is directly below.
element-pan = element pan { attlist-pan, text }
attlist-pan &= empty
element-elevation = element elevation { attlist-elevation, text }
attlist-elevation &= empty
