<?xml version='1.0' encoding='utf-8'?>
<project name="FreeDots" default="build.jar" basedir=".">
  <description>MusicXML to braille music transcription</description>
  <!-- set global properties for this build -->
  <property file="build.properties" />
  <property name="src" location="src"/>
  <property name="test" location="test"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="freedots.version" value="0.6" />
  <property name="freedots.minimum.javaversion" value="1.6" />

  <path id="class.path">
    <fileset file="${lib.swt.jar}" />
  </path>
  <path id="class.path.test">
    <pathelement location="${lib.junit.jar}" />
    <pathelement location="${test}" />
    <pathelement location="${build}"/>
    <path refid="class.path" />
  </path>

  <presetdef name="validate-musicxml">
    <schemavalidate noNamespaceFile="xsd/musicxml.xsd"
                    failonerror="true" warn="true">
      <dtd publicId="-//Recordare//DTD MusicXML 1.0 Partwise//EN"
           location="dtd/musicxml/1.0/partwise.dtd"/>
      <dtd publicId="-//Recordare//DTD MusicXML 1.1 Partwise//EN"
           location="dtd/musicxml/1.1/partwise.dtd"/>
      <dtd publicId="-//Recordare//DTD MusicXML 2.0 Partwise//EN"
           location="dtd/musicxml/2.0/partwise.dtd"/>
      <schema namespace="http://www.w3.org/XML/1998/namespace"
              file="xsd/xml.xsd" />
      <schema namespace="http://www.w3.org/1999/xlink"
              file="xsd/xlink.xsd" />
    </schemavalidate>
  </presetdef>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/org/delysid/freedots/musicxml"/>
    <copy todir="${build}/org/delysid/freedots/musicxml">
      <fileset dir="dtd/musicxml/2.0">
        <include name="*.dtd"/>
        <include name="*.mod"/>
        <include name="*.ent"/>
      </fileset>	    
    </copy>
    <mkdir dir="${build}/org/delysid/freedots/gui/swing"/>
    <copy file="/usr/share/fonts/truetype/ttf-dejavu/DejaVuSerif.ttf"
          tofile="${build}/org/delysid/freedots/gui/swing/DejaVuSerif.ttf"/>

    <copy todir="${build}/org/delysid/freedots/gui/swing">
      <fileset dir="icons">
	<include name="*.xml"/>
      </fileset>	    
    </copy>

    <copy file="scores/bwv1013-1.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv1013-1.xml"/>
    <copy file="scores/bwv1013-2.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv1013-2.xml"/>
    <copy file="scores/bwv1013-3.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv1013-3.xml"/>
    <copy file="scores/bwv1013-4.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv1013-4.xml"/>
    <copy file="scores/bwv988-aria.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv988-aria.xml"/>
    <copy file="scores/bwv988-1.xml"
          tofile="${build}/org/delysid/freedots/musicxml/bwv988-1.xml"/>

    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}"
           destdir="${build}" debug="true"
           source="${freedots.minimum.javaversion}"
           target="${freedots.minimum.javaversion}">
      <classpath refid="class.path"/>
    </javac>
    <propertyfile file="${build}/compilation.properties">
      <entry key="freedots.compile.version" value="${freedots.version}"/>
      <entry key="freedots.compile.timestamp" type="date" value="now" pattern="E MMMM dd yyyy, HH:mm z"/>
    </propertyfile>
  </target>

  <!-- Testing framework -->
  <target name="compile.test" depends="compile">
    <javac srcdir="${test}" verbose="false" debug="true">
      <classpath refid="class.path.test"/>
    </javac>
  </target>
  <target name="clean.compile.test">
    <delete> <fileset dir="${test}" includes="**/*.class" /> </delete>
  </target>
  
  <target name="test" depends="compile.test"
          description="run the test suite">
    <junit failureProperty="test.failure">
      <classpath refid="class.path.test" />
      <formatter type="brief" usefile="false" />
      <batchtest>
        <fileset dir="${test}" includes="**/Test*.class" />
      </batchtest>
    </junit>
    <fail message="test failed" if="test.failure" />
  </target>

  <!-- Validate XML content -->
  <target name="validate.scores">
    <validate-musicxml>
      <fileset dir="scores" includes="**/*.xml"/>
    </validate-musicxml>
  </target>

  <target name="build.jar" depends="test, validate.scores"
          description="generate the jar">
    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}/FreeDots-${DSTAMP}.jar" basedir="${build}">
      <manifest>
        <attribute name="Class-Path" value="${lib.swt.jar}"/>
        <attribute name="Main-Class" value="org.delysid.freedots.Main"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="build.jar">
    <java jar="${dist}/FreeDots-${DSTAMP}.jar" fork="true" />
  </target>

  <target name="build.manual" depends="build.jar"
	  description="build the user manual">
    <presetdef name="freedots">
      <java classname="org.delysid.freedots.Main"
	    failonerror="true" logError="true">
        <classpath>
          <pathelement location="dist/FreeDots-${DSTAMP}.jar"/>
          <pathelement path="${java.class.path}"/>
        </classpath>
      </java>
    </presetdef>
    <!-- Build examples -->
    <freedots output="doc/example1-2.brl">
      <arg value="input/nimobmn-examples/example1-2.xml"/>
    </freedots>
    <freedots>
      <arg value="-emf"/><arg value="doc/example1-2.mid"/>
      <arg value="input/nimobmn-examples/example1-2.xml"/>
    </freedots>
    <freedots output="doc/example1-11.brl">
      <arg value="input/nimobmn-examples/example1-11.xml"/>
    </freedots>
    <freedots>
      <arg value="-emf"/><arg value="doc/example1-11.mid"/>
      <arg value="input/nimobmn-examples/example1-11.xml"/>
    </freedots>

    <exec executable="xsltproc" logError="true" output="doc/manual.html">
      <arg value="--xinclude"/>
      <arg value="doc/html.xsl"/> <arg value="doc/manual.xml"/>
    </exec>
    <exec executable="lynx" logError="true" output="doc/manual.txt">
      <arg value="--nonumbers"/><arg value="--dump"/>
      <arg value="doc/manual.html"/>
    </exec>
    <exec executable="xsltproc" logError="true" output="doc/manual.html">
      <arg value="--xinclude"/>
      <arg value="--stringparam"/>
      <arg value="man.output.base.dir"/>
      <arg value="'doc/'"/>
      <arg value="${style.docbook.manpage}"/>
      <arg value="doc/manual.xml"/>
    </exec>
  </target>

  <target name="checkstyle"
          description="check the coding style">
    <taskdef name="checkstyle"
             classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
             classpath="lib/checkstyle-all-5.0-beta2.jar"/>
    <checkstyle config="checkstyle.xml">
      <fileset dir="${src}" includes="**/*.java"/>

    </checkstyle>
  </target>

  <target name="build.installer" depends="build.jar, build.manual"
          description="generate the MS Windows installer">
    <taskdef name="nsis" classname="net.sf.nsisant.Task">
      <classpath location="lib/nsisant-1.2.jar"/>
    </taskdef>
    <nsis script="WindowsInstaller.nsi" verbosity="2">
      <define name="JARFILE" value="FreeDots-${DSTAMP}.jar"/>
      <define name="OUTFILE" value="dist/FreeDots-${DSTAMP}.exe"/>
      <define name="VERSION" value="${freedots.version}"/>
    </nsis>
  </target>

  <target name="clean" depends="clean.compile.test"
          description="clean up">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete file="doc/manual.txt"/>
    <delete file="doc/manual.html"/>
    <delete file="doc/man1/freedots.1"/>
    <delete>
      <fileset dir="doc" includes="example*.*"/>
    </delete>
  </target>
</project>
